-- Formalization of this conjecture https://github.com/Nazgand/NazgandMathBook/blob/master/ArgumentSumRulesFromHomogeneousLinearDifferentialEquationsOfConstantCoefficientsConjecture.pdf
import Mathlib
set_option maxHeartbeats 0
set_option pp.proofs true
open Complex Classical BigOperators Finset Matrix Polynomial

structure DiffEq where
  Degree : ‚Ñï+
  Coeff : (Fin (Degree + 1)) ‚Üí ‚ÑÇ
  LeadCoeffNonZero : Coeff (Fin.ofNat (Degree + 1) Degree) ‚â† 0

def DiffEq.IsSolution (de : DiffEq) (f : ‚ÑÇ ‚Üí ‚ÑÇ) : Prop :=
  ContDiff ‚ÑÇ ‚ä§ f ‚àß ‚àÄ (z : ‚ÑÇ), 0 = ‚àë (k : (Fin (de.Degree + 1))), (de.Coeff k) * (iteratedDeriv k f z)

def DiffEq.SetOfSolutions (de : DiffEq) : Set (‚ÑÇ ‚Üí ‚ÑÇ) := {h : ‚ÑÇ ‚Üí ‚ÑÇ | de.IsSolution h}

def DiffEq.IsVectorBasis (de : DiffEq) (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) : Prop :=
  (de.SetOfSolutions = {h : ‚ÑÇ ‚Üí ‚ÑÇ | ‚àÉ (b : (Fin de.Degree) ‚Üí ‚ÑÇ), h = Œª (z : ‚ÑÇ) => ‚àë (k : (Fin de.Degree)), b k * g k z} ‚àß
  (‚àÄ (b‚ÇÄ b‚ÇÅ : (Fin de.Degree) ‚Üí ‚ÑÇ),
    (Œª (z : ‚ÑÇ) => ‚àë (k : (Fin de.Degree)), b‚ÇÄ k * g k z) = (Œª (z : ‚ÑÇ) => ‚àë (k : (Fin de.Degree)), b‚ÇÅ k * g k z) ‚Üí b‚ÇÄ = b‚ÇÅ))

-- simplify the shifted iterated derivative
lemma ShiftedIteratedDerivative (k : ‚Ñï) (z‚ÇÅ : ‚ÑÇ) {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÄ : ContDiff ‚ÑÇ ‚ä§ f) :
    iteratedDeriv k (fun z‚ÇÄ => f (z‚ÇÄ + z‚ÇÅ)) = (fun z‚ÇÄ => iteratedDeriv k f (z‚ÇÄ + z‚ÇÅ)) := by
  induction' k with K Kih
  ¬∑ simp only [iteratedDeriv_zero]
  ¬∑ rw [iteratedDeriv_succ, Kih]
    ext z
    let h‚ÇÇ := iteratedDeriv K f
    let h := fun z‚ÇÄ => (z‚ÇÄ + z‚ÇÅ)
    have hh‚ÇÇ : DifferentiableAt ‚ÑÇ h‚ÇÇ (h z) := by
      refine Differentiable.differentiableAt ?h
      sorry
    have hh : DifferentiableAt ‚ÑÇ h z := by
      sorry
    have hcomp := deriv_comp z hh‚ÇÇ hh
    have hrwh‚ÇÇ : h‚ÇÇ = iteratedDeriv K f := by exact rfl
    have hrwh : h = fun z‚ÇÄ => z‚ÇÄ + z‚ÇÅ := by exact rfl
    rw [hrwh‚ÇÇ, hrwh] at hcomp
    simp only [‚Üê iteratedDeriv_succ, differentiableAt_fun_id, differentiableAt_const, deriv_fun_add,
      deriv_id'', deriv_const', add_zero, mul_one] at hcomp
    rw [‚Üêhcomp]
    rfl

-- A solution with input shifted by a constant z‚ÇÅ is still a solution
lemma ShiftedSolution {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (z‚ÇÅ : ‚ÑÇ) (h‚ÇÄ : f ‚àà de.SetOfSolutions) :
  (Œª (z‚ÇÄ : ‚ÑÇ) => f (z‚ÇÄ + z‚ÇÅ)) ‚àà de.SetOfSolutions := by
  unfold DiffEq.SetOfSolutions
  unfold DiffEq.SetOfSolutions at h‚ÇÄ
  simp only [Set.mem_setOf_eq]
  simp only [Set.mem_setOf_eq] at h‚ÇÄ
  unfold DiffEq.IsSolution
  unfold DiffEq.IsSolution at h‚ÇÄ
  rcases h‚ÇÄ with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
  constructor
  ¬∑ refine Differentiable.contDiff ?left.hf
    sorry
  ¬∑ have hShID : ‚àÄ (k : ‚Ñï), (iteratedDeriv k fun z‚ÇÄ => f (z‚ÇÄ + z‚ÇÅ)) = fun z‚ÇÄ => iteratedDeriv k f (z‚ÇÄ + z‚ÇÅ) := by
      intros k
      rw [ShiftedIteratedDerivative k z‚ÇÅ h‚ÇÅ]
    simp_rw [hShID]
    intros z‚ÇÄ
    exact h‚ÇÇ (z‚ÇÄ + z‚ÇÅ)

lemma ExtractedFunctionExists {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g) (z‚ÇÅ : ‚ÑÇ) :
  ‚àÉ b : (Fin de.Degree ‚Üí ‚ÑÇ), (fun z‚ÇÄ => f (z‚ÇÄ + z‚ÇÅ)) = fun z => ‚àë (k : (Fin de.Degree)), b k * g k z := by
  have h‚ÇÉ := ShiftedSolution z‚ÇÅ h‚ÇÅ
  unfold DiffEq.IsVectorBasis at h‚ÇÇ
  rw [h‚ÇÇ.left] at h‚ÇÉ
  simp only [Set.mem_setOf_eq] at h‚ÇÉ
  exact h‚ÇÉ

noncomputable def ExtractedFunctions {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g) (k : Fin de.Degree) (z‚ÇÅ : ‚ÑÇ) : ‚ÑÇ := by
  exact Classical.choose (ExtractedFunctionExists h‚ÇÅ g h‚ÇÇ z‚ÇÅ) k

-- The convenient to define one
lemma ExtractedFunctionsUse0 {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g) (z‚ÇÅ : ‚ÑÇ) :
  (fun z‚ÇÄ => f (z‚ÇÄ + z‚ÇÅ)) = fun z‚ÇÄ => ‚àë (k : (Fin de.Degree)), (ExtractedFunctions h‚ÇÅ g h‚ÇÇ k z‚ÇÅ) * g k z‚ÇÄ := by
  exact Classical.choose_spec (ExtractedFunctionExists h‚ÇÅ g h‚ÇÇ z‚ÇÅ)

-- The one we actually need
lemma ExtractedFunctionsUse1 {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g) (z‚ÇÄ : ‚ÑÇ) :
  (fun z‚ÇÅ => f (z‚ÇÄ + z‚ÇÅ)) = fun z‚ÇÅ => ‚àë (k : (Fin de.Degree)), (ExtractedFunctions h‚ÇÅ g h‚ÇÇ k z‚ÇÅ) * g k z‚ÇÄ := by
  ext z‚ÇÅ
  exact congrFun (ExtractedFunctionsUse0 h‚ÇÅ g h‚ÇÇ z‚ÇÅ) z‚ÇÄ

noncomputable def KeyDifferentialOperator (de : DiffEq) (f : ‚ÑÇ ‚Üí ‚ÑÇ) : ‚ÑÇ ‚Üí ‚ÑÇ :=
  Œª (z: ‚ÑÇ) => ‚àë (k : (Fin (de.Degree + 1))), (de.Coeff k) * (iteratedDeriv k f z)

lemma AppliedDifferentialOperator0 {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g) :
  ‚àÄ (z‚ÇÄ z‚ÇÅ : ‚ÑÇ), 0 = KeyDifferentialOperator de (fun z‚ÇÅ => ‚àë (k : (Fin de.Degree)), (ExtractedFunctions h‚ÇÅ g h‚ÇÇ k z‚ÇÅ) * g k z‚ÇÄ) z‚ÇÅ := by
  intros z‚ÇÄ z‚ÇÅ
  have h‚ÇÄ := congrArg (KeyDifferentialOperator de) (ExtractedFunctionsUse1 h‚ÇÅ g h‚ÇÇ z‚ÇÄ)
  unfold KeyDifferentialOperator at h‚ÇÄ
  have h‚ÇÉ : (fun z‚ÇÅ => f (z‚ÇÄ + z‚ÇÅ)) = (fun z‚ÇÅ => f (z‚ÇÅ + z‚ÇÄ)) := by
    ext z‚ÇÇ
    ring_nf
  rw [h‚ÇÉ] at h‚ÇÄ
  clear h‚ÇÉ
  have h‚ÇÑ := congrFun h‚ÇÄ z‚ÇÅ
  clear h‚ÇÄ
  unfold KeyDifferentialOperator
  rw [‚Üêh‚ÇÑ]
  clear h‚ÇÑ
  have h‚ÇÖ := ShiftedSolution z‚ÇÄ h‚ÇÅ
  unfold DiffEq.SetOfSolutions at h‚ÇÖ
  unfold DiffEq.IsSolution at h‚ÇÖ
  simp only [Set.mem_setOf_eq] at h‚ÇÖ
  exact h‚ÇÖ.right z‚ÇÅ

lemma iteratedDerivSum {ùïú : Type u} [NontriviallyNormedField ùïú] {F : Type v} [NormedAddCommGroup F] [NormedSpace ùïú F] {Œπ : Type u_1}
  {u : Finset Œπ} {A : Œπ ‚Üí ùïú ‚Üí F} (h : ‚àÄ i ‚àà u, ContDiff ùïú ‚ä§ (A i)) (k : ‚Ñï) :
  iteratedDeriv k (fun y => Finset.sum u fun i => A i y) = (fun y => Finset.sum u fun i => iteratedDeriv k (A i) y) := by
  induction' k with K Kih
  ¬∑ simp only [iteratedDeriv_zero]
  ¬∑ have h‚ÇÄ := congrArg deriv Kih
    rw [iteratedDeriv_succ, h‚ÇÄ]
    clear h‚ÇÄ
    ext x
    have h‚ÇÅ : (1 : ‚Ñï‚àû) ‚â§ ‚ä§ := by exact OrderTop.le_top 1
    have h‚ÇÇ : ‚àÄ i ‚àà u, DifferentiableAt ùïú (iteratedDeriv K (A i)) x := by
      intros i ih
      sorry
    sorry

lemma ExtractedFunctionsDifferentiable0 {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g)
  : ‚àÄ (k : (Fin de.Degree)), Differentiable ‚ÑÇ (ExtractedFunctions h‚ÇÅ g h‚ÇÇ k) := by
  sorry

lemma ExtractedFunctionsDifferentiable1 {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g)
  (z‚ÇÄ : ‚ÑÇ) : ‚àÄ (k : (Fin de.Degree)), ContDiff ‚ÑÇ ‚ä§ (Œª (z‚ÇÅ : ‚ÑÇ) => ((ExtractedFunctions h‚ÇÅ g h‚ÇÇ k z‚ÇÅ) * g k z‚ÇÄ)) := by
  intros k
  have h‚ÇÄ := Differentiable.mul_const (ExtractedFunctionsDifferentiable0 h‚ÇÅ g h‚ÇÇ k) (g k z‚ÇÄ)
  exact Differentiable.contDiff h‚ÇÄ

lemma AppliedDifferentialOperator1 {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g) :
  ‚àÄ (z‚ÇÄ z‚ÇÅ : ‚ÑÇ), 0 = ‚àë (k : (Fin de.Degree)), (KeyDifferentialOperator de (ExtractedFunctions h‚ÇÅ g h‚ÇÇ k) z‚ÇÅ * g k z‚ÇÄ) := by
    sorry

lemma ExtractedFunctionsAreSolutions0 {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g) :
  ‚àÄ (z‚ÇÅ : ‚ÑÇ) (k : (Fin de.Degree)), 0 = KeyDifferentialOperator de (ExtractedFunctions h‚ÇÅ g h‚ÇÇ k) z‚ÇÅ := by
  intros z‚ÇÅ k
  have h0 := h‚ÇÇ.right (Œª (k : (Fin de.Degree)) => 0)
    (Œª (k : (Fin de.Degree)) => KeyDifferentialOperator de (ExtractedFunctions h‚ÇÅ g h‚ÇÇ k) z‚ÇÅ)
  simp only [zero_mul, sum_const_zero] at h0
  have h1 : ((fun z => 0) = fun z => ‚àë k : Fin ‚Üëde.Degree,
    KeyDifferentialOperator de (ExtractedFunctions h‚ÇÅ g h‚ÇÇ k) z‚ÇÅ * g k z) := by
    ext z‚ÇÄ
    exact AppliedDifferentialOperator1 h‚ÇÅ g h‚ÇÇ z‚ÇÄ z‚ÇÅ
  exact congrFun (h0 h1) k

lemma ExtractedFunctionsAreSolutions1 {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g) :
  ‚àÄ (k : (Fin de.Degree)), (ExtractedFunctions h‚ÇÅ g h‚ÇÇ k) ‚àà de.SetOfSolutions := by
  intros k
  rw [DiffEq.SetOfSolutions]
  simp only [Set.mem_setOf_eq]
  rw [DiffEq.IsSolution]
  constructor
  ¬∑ have h0 := ExtractedFunctionsDifferentiable0 h‚ÇÅ g h‚ÇÇ k
    exact Differentiable.contDiff h0
  ¬∑ intros z
    have h1 := ExtractedFunctionsAreSolutions0 h‚ÇÅ g h‚ÇÇ z k
    rw [KeyDifferentialOperator] at h1
    exact h1

lemma MatrixEntriesExist {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g) :
  ‚àÄ (k : (Fin de.Degree)), ‚àÉ (b : (Fin de.Degree) ‚Üí ‚ÑÇ),
  (ExtractedFunctions h‚ÇÅ g h‚ÇÇ k) = Œª (z : ‚ÑÇ) => ‚àë (k : (Fin de.Degree)), b k * g k z := by
  intros k
  have h0 := ExtractedFunctionsAreSolutions1 h‚ÇÅ g h‚ÇÇ k
  have h1 := h‚ÇÇ
  rw [DiffEq.IsVectorBasis] at h1
  rw [h1.left] at h0
  simp only [Set.mem_setOf_eq] at h0
  exact h0

noncomputable def MatrixEntries {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions) (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ)
  (h‚ÇÇ : de.IsVectorBasis g) (k : (Fin de.Degree)) : (Fin de.Degree) ‚Üí ‚ÑÇ := by
  exact Classical.choose (MatrixEntriesExist h‚ÇÅ g h‚ÇÇ k)

lemma MatrixEntriesUse {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions) (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ)
  (h‚ÇÇ : de.IsVectorBasis g) (k : (Fin de.Degree)) : ExtractedFunctions h‚ÇÅ g h‚ÇÇ k = fun z‚ÇÅ =>
    ‚àë (k_1 : (Fin de.Degree)), (MatrixEntries h‚ÇÅ g h‚ÇÇ k) k_1 * g k_1 z‚ÇÅ := by
  exact Classical.choose_spec (MatrixEntriesExist h‚ÇÅ g h‚ÇÇ k)

lemma ArgumentSumSumForm {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g) (z‚ÇÄ z‚ÇÅ : ‚ÑÇ) :
  f (z‚ÇÄ + z‚ÇÅ) = ‚àë (k : (Fin de.Degree)), ‚àë (k_1 : (Fin de.Degree)), MatrixEntries h‚ÇÅ g h‚ÇÇ k k_1 * g k_1 z‚ÇÅ * g k z‚ÇÄ := by
  have h0 := congrFun (ExtractedFunctionsUse1 h‚ÇÅ g h‚ÇÇ z‚ÇÄ) z‚ÇÅ
  rw [h0]
  congr
  ext k
  rw [MatrixEntriesUse h‚ÇÅ g h‚ÇÇ k]
  simp only
  exact sum_mul univ (fun i => MatrixEntries h‚ÇÅ g h‚ÇÇ k i * g i z‚ÇÅ) (g k z‚ÇÄ)

-- the column vector of the functions in g
def v {n : ‚Ñï+} (g : (Fin n) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (z : ‚ÑÇ) : Matrix (Fin n) (Fin 1) ‚ÑÇ := of Œª (y : Fin n) (_ : Fin 1) => g y z

lemma ArgumentSumMatrixForm {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g) :
  ‚àÉ (A : Matrix (Fin de.Degree) (Fin de.Degree) ‚ÑÇ),
  ‚àÄ (z‚ÇÄ z‚ÇÅ : ‚ÑÇ), ((of Œª (_ _ : Fin 1) => f (z‚ÇÄ + z‚ÇÅ)) = ((transpose (v g z‚ÇÄ)) * A * (v g z‚ÇÅ))) := by
  use of Œª (y : Fin de.Degree) (x : Fin de.Degree) => MatrixEntries h‚ÇÅ g h‚ÇÇ x y
  intros z‚ÇÄ z‚ÇÅ
  ext x y
  simp only [of_apply]
  have h0 : x = 0 := by exact Fin.fin_one_eq_zero x
  have h1 : y = 0 := by exact Fin.fin_one_eq_zero y
  rw [h1, h0, Matrix.mul_apply]
  simp_rw [Matrix.mul_apply]
  simp only [Fin.isValue, transpose_apply, of_apply]
  rw [v, v]
  simp only [Fin.isValue, of_apply]
  have h2 := ArgumentSumSumForm h‚ÇÅ g h‚ÇÇ z‚ÇÅ z‚ÇÄ
  have h3 : (z‚ÇÅ + z‚ÇÄ) = (z‚ÇÄ + z‚ÇÅ) := by exact AddCommMagma.add_comm z‚ÇÅ z‚ÇÄ
  rw [h3] at h2
  rw [h2]
  congr
  ext k
  rw [Finset.sum_mul]
  congr
  ext m
  ring_nf

lemma ArgumentSumSymmetricMatrixForm {de : DiffEq} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅ : f ‚àà de.SetOfSolutions)
  (g : (Fin de.Degree) ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (h‚ÇÇ : de.IsVectorBasis g) :
  ‚àÉ (A : Matrix (Fin de.Degree) (Fin de.Degree) ‚ÑÇ), (A = transpose A ‚àß
    ‚àÄ (z‚ÇÄ z‚ÇÅ : ‚ÑÇ), ((of Œª (_ _ : Fin 1) => f (z‚ÇÄ + z‚ÇÅ)) = ((transpose (v g z‚ÇÄ)) * A * (v g z‚ÇÅ)))) := by
  sorry
